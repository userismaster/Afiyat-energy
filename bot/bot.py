import os
import django
import sys
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
from django.utils import timezone
from contacts.models import ContactMessage
from catalog.models import Order

ITEMS_PER_PAGE = 5  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç Afiyat Energy. –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/orders - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "/messages - –ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"
    )

def get_orders_keyboard(page: int, total_pages: int, orders):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
    for order in orders:
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–∫–∞–∑ #{order.id} –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π",
                callback_data=f"mark_order_{order.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"orders_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"orders_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    keyboard.append([InlineKeyboardButton(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}",
        callback_data="page_info"
    )])
    
    return InlineKeyboardMarkup(keyboard)

def get_messages_keyboard(page: int, total_pages: int, messages):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π"""
    keyboard = []
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö
    for message in messages:
        keyboard.append([
            InlineKeyboardButton(
                f"‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ #{message.id} –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ",
                callback_data=f"mark_message_{message.id}"
            )
        ])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    nav_buttons = []
    if page > 0:
        nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"messages_{page-1}"))
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton("–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"messages_{page+1}"))
    if nav_buttons:
        keyboard.append(nav_buttons)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    keyboard.append([InlineKeyboardButton(
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}",
        callback_data="page_info"
    )])
    
    return InlineKeyboardMarkup(keyboard)

def format_order(order: Order) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"üõç –ó–∞–∫–∞–∑ #{order.id}\n"
        f"üë§ {order.first_name} {order.last_name}\n"
        f"üì± {order.phone}\n"
        f"üìß {order.email}\n"
        f"üìç {order.address}\n"
        f"üí∞ –°—É–º–º–∞: {order.total_price} UZS\n"
        f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {order.comment if order.comment else '-'}\n"
        f"üïí –°–æ–∑–¥–∞–Ω: {order.created_at.strftime('%d.%m.%Y %H:%M')}"
    )

def format_message(message: ContactMessage) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    return (
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ #{message.id}\n"
        f"üë§ {message.name}\n"
        f"üì± {message.phone if message.phone else '-'}\n"
        f"üìß {message.email}\n"
        f"üìù –¢–µ–º–∞: {message.subject}\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {message.message}\n"
        f"üïí –°–æ–∑–¥–∞–Ω–æ: {message.created_at.strftime('%d.%m.%Y %H:%M')}"
    )

async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    yesterday = datetime.now() - timedelta(days=1)
    orders = Order.objects.filter(
        created_at__gte=yesterday,
        status='new'
    ).order_by('-created_at')
    
    total_orders = orders.count()
    if total_orders == 0:
        await update.effective_message.reply_text("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_orders + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_orders = orders[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üì¶ –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–≤—Å–µ–≥–æ: {total_orders}):\n\n"
    message += "\n\n".join(format_order(order) for order in page_orders)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=get_orders_keyboard(page, total_pages, page_orders)
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=get_orders_keyboard(page, total_pages, page_orders)
        )

async def show_messages(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int = 0):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    yesterday = timezone.now() - timedelta(days=1)
    messages = ContactMessage.objects.filter(
        created_at__gte=yesterday,
        is_processed=False
    ).order_by('-created_at')
    
    total_messages = messages.count()
    if total_messages == 0:
        await update.effective_message.reply_text("–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
        return
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_messages + ITEMS_PER_PAGE - 1) // ITEMS_PER_PAGE
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * ITEMS_PER_PAGE
    end_idx = start_idx + ITEMS_PER_PAGE
    page_messages = messages[start_idx:end_idx]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üì® –ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Å–µ–≥–æ: {total_messages}):\n\n"
    message += "\n\n".join(format_message(msg) for msg in page_messages)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=get_messages_keyboard(page, total_pages, page_messages)
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=get_messages_keyboard(page, total_pages, page_messages)
        )

async def mark_order_as_processed(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç –∑–∞–∫–∞–∑ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π"""
    try:
        order = Order.objects.get(id=order_id)
        order.status = 'processing'  # –∏–ª–∏ –¥—Ä—É–≥–æ–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å—Ç–∞—Ç—É—Å
        order.save()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await update.callback_query.answer(f"–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_page = 0
        for row in update.callback_query.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data.startswith("orders_"):
                    current_page = int(button.callback_data.split("_")[1])
                    break
        
        await show_orders(update, context, current_page)
        
    except Order.DoesNotExist:
        await update.callback_query.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except Exception as e:
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")
        print(f"Error marking order as processed: {e}")

async def mark_message_as_processed(update: Update, context: ContextTypes.DEFAULT_TYPE, message_id: int):
    """–û—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ"""
    try:
        message = ContactMessage.objects.get(id=message_id)
        message.mark_as_processed()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await update.callback_query.answer(f"–°–æ–æ–±—â–µ–Ω–∏–µ #{message_id} –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        current_page = 0
        for row in update.callback_query.message.reply_markup.inline_keyboard:
            for button in row:
                if button.callback_data.startswith("messages_"):
                    current_page = int(button.callback_data.split("_")[1])
                    break
        
        await show_messages(update, context, current_page)
        
    except ContactMessage.DoesNotExist:
        await update.callback_query.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    except Exception as e:
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        print(f"Error marking message as processed: {e}")

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    
    if query.data == "page_info":
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        await query.answer()
        return
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–±—ç–∫–∞
    action = query.data.split('_')[0]
    
    if action == "mark":
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ ID –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        obj_type = query.data.split('_')[1]
        obj_id = int(query.data.split('_')[2])
        
        if obj_type == "order":
            await mark_order_as_processed(update, context, obj_id)
        elif obj_type == "message":
            await mark_message_as_processed(update, context, obj_id)
    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        action, page = query.data.split('_')
        page = int(page)
        
        if action == "orders":
            await show_orders(update, context, page)
        elif action == "messages":
            await show_messages(update, context, page)
    
    await query.answer()

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("–û—à–∏–±–∫–∞: –Ω–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (TELEGRAM_BOT_TOKEN)")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(token).build()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("orders", show_orders))
    application.add_handler(CommandHandler("messages", show_messages))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
    sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
    django.setup()
    
    main()
